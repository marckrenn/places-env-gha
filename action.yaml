name: "places-env"
description: "Installs places-env, injects crypto keys, decrypts places.enc.yaml and generates environment(s)."
author: "marckrenn"

inputs:
  version:
    description: "Version specifier for places-env to install. For example: '==1.0.*'"
    required: false
    default: "latest"

  keys:
    description: >
      A YAML dictionary of key-value pairs. Each key will become a file in ./places/keys.
      Example (this would be provided by the calling workflow):
        keys: |
          default: some_secret_value
          prod: another_secret_value
    required: false
    default: ""

  generate:
    description: >
      A YAML list of environments to generate.
      Example:
        generate: |
          - local
          - prod
      This will run:
        places generate environment local prod
      If empty and 'generate-all' is not 'true', no generation command is run.
    required: false
    default: ""

  generate-all:
    description: >
      If set to 'true', runs 'places generate environment --all' instead of processing 'generate'.
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install places-env
      run: |
        if [ "${{ inputs.version }}" = "latest" ]; then
          pip install places-env
        else
          pip install "places-env${{ inputs.version }}"
        fi
      shell: bash

    - name: Write keys to files
      if: ${{ inputs.keys != '' }}
      run: |
        mkdir -p ./.places/keys
        # Parse the keys input as YAML and extract key-value pairs
        echo "${{ inputs.keys }}" | yq -r 'to_entries | .[] | "\(.key) \(.value)"' | while read key value; do
          echo "$value" > "./.places/keys/$key"
        done
      shell: bash

    - name: Decrypt places.enc.yaml
      run: places decrypt
      shell: bash

    - name: Run places generate all
      if: ${{ inputs.generate-all == 'true' }}
      run: places generate environment --all
      shell: bash

    - name: Run places generate
      if: ${{ inputs.generate != '' && inputs.generate-all != 'true' }}
      run: |
        GENERATE_INPUT="${{ inputs.generate }}"

        # Check if 'generate' is a YAML array
        if echo "$GENERATE_INPUT" | yq -e 'type=="array"' > /dev/null 2>&1; then
          # It's a YAML array. Extract items and join them with spaces.
          ENVIRONMENTS=$(echo "$GENERATE_INPUT" | yq -r '.[]' | xargs)
        else
          # Not an array, treat as single environment.
          ENVIRONMENTS=$(echo "$GENERATE_INPUT" | xargs)
        fi

        places generate environment $ENVIRONMENTS
      shell: bash

branding:
  icon: "list"
  color: "blue"